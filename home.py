import streamlit as st

def app():

    st.title("Generative Adversarial Network (GAN)")

    st.header("**Contributors:**")
    st.write("- Student Name 1: Phan Minh Trung - 20133106")
    st.write("- Student Name 2: Ngô Quang Trường - 20133107")

    st.header("1.   Tổng quát về Generative Adversarial Network (GAN)")
    st.write("Mạng sáng tạo đối nghịch (Generative Adversarial Network) là một mô hình Deep Learning, được giới thiệu bởi Ian Goodfellow vào năm 2014. Mô hình này tập trung vào khả năng tạo ra dữ liệu mới từ một phân phối xác suất đã cho. Hay nói một cách khác là tạo ra các dữ liệu mới dựa trên tập dữ liệu đã có sẵn.")
    st.write("\n")
    st.write(" Mô hình GAN có thể được tưởng tượng như một trò chơi đối đầu giữa hai bên: một bên đóng vai trò là tên tội phạm làm tiền giả và bên kia là cảnh sát. Trong trò chơi này, tên tội phạm cố gắng tạo ra tiền giả một cách thông minh để đánh lừa cảnh sát, trong khi cảnh sát cố gắng phát hiện tiền giả một cách hiệu quả.")
    st.write("\n")
    st.image("./Image/IntroductionGAN.png", caption="Tổng quan về mô hình GAN", use_column_width=True)
    st.write("Mô hình GAN cũng là một trò chơi tương tự, nơi có hai mạng nơ-ron cạnh tranh lẫn nhau. Mạng đầu tiên tạo ra dữ liệu giả, trong khi mạng thứ hai cố gắng phân biệt giữa dữ liệu thật và dữ liệu giả.")
    st.header("2.   Cấu trúc GAN")
    st.write("Kiến trúc mô hình GAN bao gồm hai mô hình mạng nơ-ron là mạng Generator và mạng Discriminator.")
    st.image("./Image/CauTrucGAN.png", caption="Cấu trúc mô hình GAN", use_column_width=True)
    st.header("2.1. Mạng Generator")
    st.write("Mạng Generator, thường được biểu diễn là G(z), là mạng nơ-ron có nhiệm vụ tạo ra dữ liệu giả từ một vector nhiễu ngẫu nhiên z. Đầu vào của Generator là vector nhiễu z có phân phối ngẫu nhiên để tạo ra tạo ra dữ liệu mẫu và đưa đến cho mạng Discriminator.")
    st.header("2.2. Mạng Discriminator")
    st.write("Mạng Discriminator, thường được biểu diễn là D(x), là mạng nơ-ron có nhiệm vụ phân biệt giữa dữ liệu thật và dữ liệu giả được tạo ra bởi Generator. Nó lấy dữ liệu đầu là dữ liệu thật (x) và dữ liệu được tạo ra từ Generator. Sau đó, sử dụng mạng nơ-ron để thực hiện một tác vụ phân loại nhị phân, tức là đưa ra xác suất rằng đầu vào là dữ liệu thật (xác suất cao) hay dữ liệu giả (xác suất thấp) với giá trị trong phạm vi [0,1].")
    st.header("2.3. Hàm mất mát (Loss Function)")
    st.write("Hàm loss function lồng ghép đồng thời loss function của Generator và Discriminator. Mục tiêu của GAN là đạt được sự cân bằng giữa Generator và Discriminator. Điều này thường được thể hiện bằng một hàm mất mát.Hàm mất mát của Discriminator: Discriminator cố gắng tối ưu hóa hàm mất mát bằng cách phân biệt giữa dữ liệu thật và dữ liệu giả một cách tốt nhất.")
    st.image("./Image/LossDis.png", caption="Hàm mất mát của Discriminator", use_column_width=True)
    st.write("Hàm mất mát của Generator: Generator cố gắng tối thiểu hóa hàm mất mát bằng cách tạo ra dữ liệu giả sao cho Discriminator không thể phân biệt nó với dữ liệu thật. Hàm mất mát đối nghịch cho Generator thường được biểu diễn như sau:")
    st.image("./Image/LossGen.png", caption="Hàm mất mát của Generator", use_column_width=True)
    st.write("Do đó ta có được một hàm mất mát tổng quát có dạng như sau:")
    st.image("./Image/LossGAN.png", caption="Hàm mất mát tổng quát của GAN", use_column_width=True)
    st.header("3.	Cách hoạt động")
    st.write("Mô hình GAN hoạt động bằng cách cạnh tranh giữa Generator và Discriminator, và mô hình GAN tiếp tục học và cải thiện cả hai thành phần cho đến khi đạt được sự cân bằng tại điểm mà Generator có khả năng tạo ra dữ liệu giả chất lượng tương tự dữ liệu thật.")
    st.write("\n")
    st.write("Quá trình hoạt động của mô hình GAN bao gồm các bước sau:")
    st.markdown("* Generator (G) bắt đầu bằng cách nhận một vector nhiễu ngẫu nhiên z từ một phân phối xác suất cụ thể. Sau đó, sử dụng mạng nơ-ron để ánh xạ vector nhiễu z thành một hình ảnh giả (G(z)). Ban đầu, G(z) là một ảnh hoàn toàn ngẫu nhiên và không chứa thông tin hữu ích.")
    st.markdown("* Cả ảnh thật x và ảnh giả G(z) được đưa vào Discriminator (D) cùng với nhãn đúng sai. Nhãn đúng cho ảnh thật là 1 (đúng), và cho ảnh giả là 0 (sai). Discriminator (D) sử dụng mạng nơ-ron để thực hiện một tác vụ phân loại nhị phân. Nó cố gắng đánh giá xác suất rằng mỗi ảnh đầu vào là thật hoặc giả. Ban đầu, D có thể đưa ra dự đoán ngẫu nhiên do trọng số ngẫu nhiên.")
    st.image("./Image/BackDis.png", caption="Backpropagation in discrimination training", use_column_width=True)
    st.markdown("* Sau khi Discriminator (D) đã được đào tạo, Generator (G) nhận phản hồi từ D về khả năng làm giả của dữ liệu G(z). Dựa trên phản hồi này, Generator cải thiện khả năng tạo ra dữ liệu giả sao cho nó đánh lừa được Discriminator.")
    st.image("./Image/BackGen.png", caption="Backpropagation in generator training", use_column_width=True)
    st.markdown("* Quá trình trên lặp đi lặp lại qua nhiều vòng đào tạo. Discriminator và Generator liên tục cạnh tranh và cải thiện. Quá trình đào tạo tiếp tục cho đến khi Discriminator không thể phân biệt được ảnh nào là ảnh G tạo ra và ảnh nào là ảnh thật (x). Tại điểm này, Generator đã đạt được khả năng tạo ra dữ liệu giả rất giống với dữ liệu thật, và mô hình GAN đạt được điểm cân bằng")
    st.header("4.	Ưu và nhược điểm")
    st.header("a) Ưu điểm")
    st.markdown("* Tạo dữ liệu chất lượng cao: Mô hình GAN có khả năng tạo ra dữ liệu giả rất giống với dữ liệu thật. Điều này đặc biệt hữu ích trong nhiều ứng dụng, như tạo hình ảnh, âm nhạc, văn bản và nhiều loại dữ liệu khác.")
    st.markdown("* Khả năng tự học: GAN không yêu cầu sự can thiệp thủ công trong việc tạo dữ liệu giả. Thay vào đó, nó tự học từ dữ liệu huấn luyện và tạo ra các mẫu dựa trên kiến thức học được.")
    st.markdown("* Không yêu cầu dữ liệu đánh giá: GAN không cần có dữ liệu đánh giá chính xác (labeled data) như các phương pháp học có giám sát khác. Điều này làm cho nó phù hợp cho việc tạo dữ liệu trong các tình huống không có sẵn nhiều dữ liệu đã gán nhãn.")
    st.markdown("* Đa dạng sáng tạo: GAN có khả năng tạo ra nhiều biến thể khác nhau của dữ liệu, giúp tạo ra đa dạng trong việc tạo mẫu.")
    st.header("b) Nhược điểm")
    st.markdown("* Khó đào tạo: Mô hình GAN có thể khá khó đào tạo và không ổn định. Quá trình đào tạo GAN có thể dẫn đến hiện tượng mất cần bằng giữa hiệu suất của mô hình Generator và mô hình Discriminator. Điều này có thể dẫn đến tình huống mà Discriminator sau một thời gian sẽ trở nên quá giỏi trong việc phân loại các mẫu được tạo ra bởi Generator, điều này ngăn cản sự tiến bộ của Generator.")
    st.markdown("* Cần nhiều dữ liệu: GAN thường cần một lượng lớn dữ liệu huấn luyện để đạt được kết quả tốt. Điều này có thể là một hạn chế khi dữ liệu hiếm hoặc đắt đỏ.")
    st.markdown("* Thời gian đào tạo và tính toán: Quá trình đào tạo mô hình GAN có thể mất rất nhiều thời gian và yêu cầu tính toán mạnh mẽ, đặc biệt là khi mô hình lớn và phức tạp.")